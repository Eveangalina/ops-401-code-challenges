#!/usr/bin/env python3
# Script Name: Ops Challenge: Signature-based Malware Detection Part 2 of 3
# Author: E. Campos
# Date of latest revision: Feb 22 2024
# Resources: Classmates; Rodolfo Gonzalez / Juan Cano / chat.openai.com
# Purpose: Enhance file search with SHA-1 hash calculation for integrity verification.

import os
import hashlib

# Function to return the SHA-1 hash of a file.
def hash_file(filename):
    # Create a new SHA-1 hash object.
    h = hashlib.sha1()
    # Open the file in binary read mode.
    with open(filename, 'rb') as file:
        # Read the file in 1024 byte chunks.
        while (chunk := file.read(1024)):
            # Update the hash object with the chunk.
            h.update(chunk)
    # Return the hexadecimal digest of the hash.
    return h.hexdigest()

# Function to search for a file within a directory and its subdirectories.
def search_file(file_name, directory):
    # List to hold paths of found files.
    found_files = []
    # Counter for the number of files searched.
    files_searched = 0

    # Check if the provided directory path is valid.
    if not os.path.isdir(directory):
        print("Error: Invalid directory path.")
        return [], 0

    # Inform the user that the search has started.
    print(f"Searching for '{file_name}' in '{directory}'...")
    # Walk through the directory tree.
    for root, _, files in os.walk(directory):
        for file in files:
            # Increment the files searched counter.
            files_searched += 1
            if file == file_name:
                # Construct the full file path.
                file_path = os.path.join(root, file)
                # Print the path of the found file.
                print(f"\033[93mFound: {file_path}\033[0m")
                # Add the path to the list of found files.
                found_files.append(file_path)
            # Print the progress for every 100 files searched.
            if files_searched % 100 == 0:
                print_progress(files_searched)

    # Return the list of found files and the total number of files searched.
    return found_files, files_searched

# Function to print the current search progress.
def print_progress(files_searched):
    # Print the number of files searched so far, using carriage return to overwrite the line.
    print(f"Files searched: {files_searched}", end='\r')

# Function to list directories within a specified base directory.
def list_directories(base_directory="/"):
    # Print the base directory being listed.
    print(f"Available directories in {base_directory}:")
    # List each item in the base directory.
    for item in os.listdir(base_directory):
        # Construct the full path of the item.
        item_path = os.path.join(base_directory, item)
        # Check if the item is a directory.
        if os.path.isdir(item_path):
            # Print the directory path.
            print(f"\033[95m- {item_path}\033[0m")
    # Add a newline for clean separation.
    print()

# Function to interactively ask the user to calculate hashes for found files.
def hash_files_interactively(found_files):
    # Loop through each found file.
    for file in found_files:
        # Ask the user if they want to calculate the hash for this file.
        if input(f"Calculate SHA-1 hash for {file}? (y/n): ").lower().strip() == 'y':
            # Print the SHA-1 hash of the file.
            print(f"SHA-1 for {file}: {hash_file(file)}")

# Function to handle the file search and hash calculation process.
def search_files():
    # Prompt the user for the name of the file to search for.
    file_name = input("Enter the file name to search for: ").strip()
    # Prompt the user for the directory to search within.
    directory = input("Enter the directory to search in or type 'list' to see available directories: ").strip()

    # If the user types 'list', call the function to list directories.
    if directory.lower() == "list":
        list_directories()
        # Ask for the directory again after listing.
        directory = input("Enter the directory to search in: ").strip()

    # Validate the provided file name and directory path.
    if not file_name or not directory or not os.path.exists(directory):
        print("Error: Please provide both a valid file name and directory.")
        return

    # Perform the search using the provided file name and directory.
    found_files, files_searched = search_file(file_name, directory)
    # Print the total number of files searched and hits found.
    print(f"\nTotal files searched: {files_searched}\