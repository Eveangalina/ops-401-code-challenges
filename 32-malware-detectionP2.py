#!/usr/bin/env python3
# Script Name: Ops Challenge: Signature-based Malware Detection Part 2 of 3
# Author: E. Campos
# Date of latest revision: Feb 22 2024
# Resources: Classmates; Rodolfo Gonzalez / Juan Cano / chat.openai.com
# Purpose: Enhance file search with SHA-1 hash calculation for integrity verification.

import os
import hashlib

# This function calculates the SHA-1 hash of a given file.
def hash_file(filename):
    print(f"Calculating SHA-1 hash for {filename}...")
    h = hashlib.sha1()
    with open(filename, 'rb') as file:
        chunk = 0
        while chunk != b'':
            chunk = file.read(1024)
            h.update(chunk)
    print("SHA-1 hash calculation complete.")
    return h.hexdigest()

# This function searches for a file in a directory and its subdirectories.
def search_file(file_name, directory):
    print(f"Starting search for '{file_name}' within {directory} and its subdirectories.")
    hits = 0
    files_searched = 0

    if not os.path.isdir(directory):
        print("Provided directory is invalid.")
        return 0, 0

    for root, dirs, files in os.walk(directory):
        for file in files:
            files_searched += 1
            if file == file_name:
                hits += 1
                file_path = os.path.join(root, file)
                print(f"File found: {file_path}")
                if input("Do you want to calculate the SHA-1 hash of this file? (y/n): ").strip().lower() == 'y':
                    print(f"SHA-1: {hash_file(file_path)}")
            print_progress(files_searched)
    print("Search complete.")
    return hits, files_searched

# This function prints the number of files that have been searched.
def print_progress(files_searched):
    print(f"Number of files searched: {files_searched}", end='\r')

# This function lists all directories in the root directory.
def list_directories():
    print("Listing directories in the root directory...")
    current_directory = os.getcwd()
    for item in os.listdir("/"):
        item_path = os.path.join("/", item)
        if os.path.isdir(item_path):
            print(f"Directory: {item_path}{' (Current Directory)' if item_path == current_directory else ''}")
    print("Directory listing complete.")

# This function handles the file search and optionally computes the SHA-1 hash.
def search_files():
    print("Please enter the file name and directory to search.")
    file_name = input("File name to search for: ").strip()
    directory = input("Directory to search in (type 'list' to display directories): ").strip()

    if directory.lower() == "list":
        list_directories()
    elif file_name and directory:
        if os.path.exists(directory):
            hits, files_searched = search_file(file_name, directory)
            print(f"Search results: {hits} hits found after searching {files_searched} files.")
        else:
            print("The specified directory does not exist.")
    else:
        print("File name or directory was not provided.")

# The main function to display options and respond to user input.
def main():
    print("Welcome to the file search and SHA-1 hash computation tool.")
    while True:
        print("\nOptions:")
        print("1 - Search for files")
        print("2 - List directories")
        print("3 - Exit")
        choice = input("Please choose an option: ").strip()

        if choice == "1":
            search_files()
        elif choice == "2":
            list_directories()
        elif choice == "3":
            print("Exiting the program.")
            break
        else:
            print("Invalid choice, please try again.")

if __name__ == "__main__":
    main()